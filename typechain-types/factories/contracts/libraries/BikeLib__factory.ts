/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BikeLib,
  BikeLibInterface,
} from "../../../contracts/libraries/BikeLib";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "bikeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    name: "BikeValidated",
    type: "event",
  },
] as const;

const _bytecode =
  "0x608060405234601b575b60405160436027823930815050604390f35b6022600080fd5b600956fe6080604052600b600080fd5b00fea264697066735822122009058864a84d18da8d11cb2cdbb76c39c643e200e91acd780c68ac3028961b1364736f6c63430008110033";

type BikeLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BikeLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BikeLib__factory extends ContractFactory {
  constructor(...args: BikeLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BikeLib & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BikeLib__factory {
    return super.connect(runner) as BikeLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BikeLibInterface {
    return new Interface(_abi) as BikeLibInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): BikeLib {
    return new Contract(address, _abi, runner) as unknown as BikeLib;
  }
}
