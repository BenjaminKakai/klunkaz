/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Klunkaz {
  export type BikeDetailsStruct = {
    bikeBrand: string;
    bikeTitle: string;
    bikeSize: string;
    bikeColor: string;
    bikeFrame: string;
    bikeFork: string;
    bikeShock: string;
  };

  export type BikeDetailsStructOutput = [
    bikeBrand: string,
    bikeTitle: string,
    bikeSize: string,
    bikeColor: string,
    bikeFrame: string,
    bikeFork: string,
    bikeShock: string
  ] & {
    bikeBrand: string;
    bikeTitle: string;
    bikeSize: string;
    bikeColor: string;
    bikeFrame: string;
    bikeFork: string;
    bikeShock: string;
  };

  export type BikeMetadataStruct = {
    category: string;
    images: string;
    bikeAddress: string;
    bikeFeatures: string;
    isStolen: boolean;
    isInsured: boolean;
  };

  export type BikeMetadataStructOutput = [
    category: string,
    images: string,
    bikeAddress: string,
    bikeFeatures: string,
    isStolen: boolean,
    isInsured: boolean
  ] & {
    category: string;
    images: string;
    bikeAddress: string;
    bikeFeatures: string;
    isStolen: boolean;
    isInsured: boolean;
  };

  export type BikeStruct = {
    productID: BigNumberish;
    owner: AddressLike;
    price: BigNumberish;
    details: Klunkaz.BikeDetailsStruct;
    metadata: Klunkaz.BikeMetadataStruct;
    reviewers: AddressLike[];
    reviews: string[];
  };

  export type BikeStructOutput = [
    productID: bigint,
    owner: string,
    price: bigint,
    details: Klunkaz.BikeDetailsStructOutput,
    metadata: Klunkaz.BikeMetadataStructOutput,
    reviewers: string[],
    reviews: string[]
  ] & {
    productID: bigint;
    owner: string;
    price: bigint;
    details: Klunkaz.BikeDetailsStructOutput;
    metadata: Klunkaz.BikeMetadataStructOutput;
    reviewers: string[];
    reviews: string[];
  };

  export type ReviewStruct = {
    reviewer: AddressLike;
    productId: BigNumberish;
    rating: BigNumberish;
    comment: string;
    likes: BigNumberish;
    timestamp: BigNumberish;
  };

  export type ReviewStructOutput = [
    reviewer: string,
    productId: bigint,
    rating: bigint,
    comment: string,
    likes: bigint,
    timestamp: bigint
  ] & {
    reviewer: string;
    productId: bigint;
    rating: bigint;
    comment: string;
    likes: bigint;
    timestamp: bigint;
  };
}

export interface KlunkazInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addReview"
      | "approve"
      | "balanceOf"
      | "bikeIndex"
      | "deleteReview"
      | "getApproved"
      | "getBike"
      | "getBikeDetails"
      | "getBikeMetadata"
      | "getHighestRatedProduct"
      | "getProductReviews"
      | "getUserReviews"
      | "hasLikedReview"
      | "insureBike"
      | "isApprovedForAll"
      | "likeReview"
      | "listBike"
      | "markAsStolen"
      | "name"
      | "owner"
      | "ownerOf"
      | "registerTracker"
      | "renounceOwnership"
      | "reviewsCounter"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "unflagBikeAsStolen"
      | "updatePrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BikeInsuranceUpdated"
      | "BikeListed"
      | "BikeResold"
      | "BikeSold"
      | "BikeStatusUpdated"
      | "OwnershipTransferred"
      | "PriceUpdated"
      | "ReviewAdded"
      | "ReviewDeleted"
      | "ReviewLiked"
      | "TrackerRegistered"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addReview",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bikeIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteReview",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBike",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBikeDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBikeMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestRatedProduct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProductReviews",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReviews",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLikedReview",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "insureBike",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "likeReview",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listBike",
    values: [
      BigNumberish,
      Klunkaz.BikeDetailsStruct,
      Klunkaz.BikeMetadataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsStolen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTracker",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unflagBikeAsStolen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addReview", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bikeIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBike", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBikeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBikeMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestRatedProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLikedReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "insureBike", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "likeReview", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listBike", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markAsStolen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unflagBikeAsStolen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BikeInsuranceUpdatedEvent {
  export type InputTuple = [id: BigNumberish, isInsured: boolean];
  export type OutputTuple = [id: bigint, isInsured: boolean];
  export interface OutputObject {
    id: bigint;
    isInsured: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BikeListedEvent {
  export type InputTuple = [
    id: BigNumberish,
    owner: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [id: bigint, owner: string, price: bigint];
  export interface OutputObject {
    id: bigint;
    owner: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BikeResoldEvent {
  export type InputTuple = [
    id: BigNumberish,
    oldOwner: AddressLike,
    newOwner: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    oldOwner: string,
    newOwner: string,
    price: bigint
  ];
  export interface OutputObject {
    id: bigint;
    oldOwner: string;
    newOwner: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BikeSoldEvent {
  export type InputTuple = [
    id: BigNumberish,
    oldOwner: AddressLike,
    newOwner: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    oldOwner: string,
    newOwner: string,
    price: bigint
  ];
  export interface OutputObject {
    id: bigint;
    oldOwner: string;
    newOwner: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BikeStatusUpdatedEvent {
  export type InputTuple = [id: BigNumberish, isStolen: boolean];
  export type OutputTuple = [id: bigint, isStolen: boolean];
  export interface OutputObject {
    id: bigint;
    isStolen: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [bikeId: BigNumberish, newPrice: BigNumberish];
  export type OutputTuple = [bikeId: bigint, newPrice: bigint];
  export interface OutputObject {
    bikeId: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewAddedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    reviewer: AddressLike,
    rating: BigNumberish,
    comment: string
  ];
  export type OutputTuple = [
    productId: bigint,
    reviewer: string,
    rating: bigint,
    comment: string
  ];
  export interface OutputObject {
    productId: bigint;
    reviewer: string;
    rating: bigint;
    comment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewDeletedEvent {
  export type InputTuple = [productId: BigNumberish, reviewIndex: BigNumberish];
  export type OutputTuple = [productId: bigint, reviewIndex: bigint];
  export interface OutputObject {
    productId: bigint;
    reviewIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewLikedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    reviewIndex: BigNumberish,
    liker: AddressLike,
    likes: BigNumberish
  ];
  export type OutputTuple = [
    productId: bigint,
    reviewIndex: bigint,
    liker: string,
    likes: bigint
  ];
  export interface OutputObject {
    productId: bigint;
    reviewIndex: bigint;
    liker: string;
    likes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrackerRegisteredEvent {
  export type InputTuple = [bikeId: BigNumberish, deviceAddress: AddressLike];
  export type OutputTuple = [bikeId: bigint, deviceAddress: string];
  export interface OutputObject {
    bikeId: bigint;
    deviceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Klunkaz extends BaseContract {
  connect(runner?: ContractRunner | null): Klunkaz;
  waitForDeployment(): Promise<this>;

  interface: KlunkazInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addReview: TypedContractMethod<
    [productId: BigNumberish, rating: BigNumberish, comment: string],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  bikeIndex: TypedContractMethod<[], [bigint], "view">;

  deleteReview: TypedContractMethod<
    [productId: BigNumberish, reviewIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getBike: TypedContractMethod<
    [id: BigNumberish],
    [Klunkaz.BikeStructOutput],
    "view"
  >;

  getBikeDetails: TypedContractMethod<
    [bikeId: BigNumberish],
    [Klunkaz.BikeDetailsStructOutput],
    "view"
  >;

  getBikeMetadata: TypedContractMethod<
    [bikeId: BigNumberish],
    [Klunkaz.BikeMetadataStructOutput],
    "view"
  >;

  getHighestRatedProduct: TypedContractMethod<[], [bigint], "view">;

  getProductReviews: TypedContractMethod<
    [productId: BigNumberish],
    [Klunkaz.ReviewStructOutput[]],
    "view"
  >;

  getUserReviews: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  hasLikedReview: TypedContractMethod<
    [productId: BigNumberish, reviewIndex: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  insureBike: TypedContractMethod<[bikeId: BigNumberish], [void], "payable">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  likeReview: TypedContractMethod<
    [productId: BigNumberish, reviewIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  listBike: TypedContractMethod<
    [
      price: BigNumberish,
      details: Klunkaz.BikeDetailsStruct,
      metadata: Klunkaz.BikeMetadataStruct
    ],
    [bigint],
    "nonpayable"
  >;

  markAsStolen: TypedContractMethod<
    [bikeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  registerTracker: TypedContractMethod<
    [bikeId: BigNumberish, deviceAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reviewsCounter: TypedContractMethod<[], [bigint], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unflagBikeAsStolen: TypedContractMethod<
    [bikeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePrice: TypedContractMethod<
    [bikeId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addReview"
  ): TypedContractMethod<
    [productId: BigNumberish, rating: BigNumberish, comment: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bikeIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deleteReview"
  ): TypedContractMethod<
    [productId: BigNumberish, reviewIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBike"
  ): TypedContractMethod<
    [id: BigNumberish],
    [Klunkaz.BikeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBikeDetails"
  ): TypedContractMethod<
    [bikeId: BigNumberish],
    [Klunkaz.BikeDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBikeMetadata"
  ): TypedContractMethod<
    [bikeId: BigNumberish],
    [Klunkaz.BikeMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHighestRatedProduct"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProductReviews"
  ): TypedContractMethod<
    [productId: BigNumberish],
    [Klunkaz.ReviewStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserReviews"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasLikedReview"
  ): TypedContractMethod<
    [productId: BigNumberish, reviewIndex: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "insureBike"
  ): TypedContractMethod<[bikeId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "likeReview"
  ): TypedContractMethod<
    [productId: BigNumberish, reviewIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listBike"
  ): TypedContractMethod<
    [
      price: BigNumberish,
      details: Klunkaz.BikeDetailsStruct,
      metadata: Klunkaz.BikeMetadataStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "markAsStolen"
  ): TypedContractMethod<[bikeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "registerTracker"
  ): TypedContractMethod<
    [bikeId: BigNumberish, deviceAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reviewsCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unflagBikeAsStolen"
  ): TypedContractMethod<[bikeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<
    [bikeId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BikeInsuranceUpdated"
  ): TypedContractEvent<
    BikeInsuranceUpdatedEvent.InputTuple,
    BikeInsuranceUpdatedEvent.OutputTuple,
    BikeInsuranceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BikeListed"
  ): TypedContractEvent<
    BikeListedEvent.InputTuple,
    BikeListedEvent.OutputTuple,
    BikeListedEvent.OutputObject
  >;
  getEvent(
    key: "BikeResold"
  ): TypedContractEvent<
    BikeResoldEvent.InputTuple,
    BikeResoldEvent.OutputTuple,
    BikeResoldEvent.OutputObject
  >;
  getEvent(
    key: "BikeSold"
  ): TypedContractEvent<
    BikeSoldEvent.InputTuple,
    BikeSoldEvent.OutputTuple,
    BikeSoldEvent.OutputObject
  >;
  getEvent(
    key: "BikeStatusUpdated"
  ): TypedContractEvent<
    BikeStatusUpdatedEvent.InputTuple,
    BikeStatusUpdatedEvent.OutputTuple,
    BikeStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewAdded"
  ): TypedContractEvent<
    ReviewAddedEvent.InputTuple,
    ReviewAddedEvent.OutputTuple,
    ReviewAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewDeleted"
  ): TypedContractEvent<
    ReviewDeletedEvent.InputTuple,
    ReviewDeletedEvent.OutputTuple,
    ReviewDeletedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewLiked"
  ): TypedContractEvent<
    ReviewLikedEvent.InputTuple,
    ReviewLikedEvent.OutputTuple,
    ReviewLikedEvent.OutputObject
  >;
  getEvent(
    key: "TrackerRegistered"
  ): TypedContractEvent<
    TrackerRegisteredEvent.InputTuple,
    TrackerRegisteredEvent.OutputTuple,
    TrackerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BikeInsuranceUpdated(uint256,bool)": TypedContractEvent<
      BikeInsuranceUpdatedEvent.InputTuple,
      BikeInsuranceUpdatedEvent.OutputTuple,
      BikeInsuranceUpdatedEvent.OutputObject
    >;
    BikeInsuranceUpdated: TypedContractEvent<
      BikeInsuranceUpdatedEvent.InputTuple,
      BikeInsuranceUpdatedEvent.OutputTuple,
      BikeInsuranceUpdatedEvent.OutputObject
    >;

    "BikeListed(uint256,address,uint256)": TypedContractEvent<
      BikeListedEvent.InputTuple,
      BikeListedEvent.OutputTuple,
      BikeListedEvent.OutputObject
    >;
    BikeListed: TypedContractEvent<
      BikeListedEvent.InputTuple,
      BikeListedEvent.OutputTuple,
      BikeListedEvent.OutputObject
    >;

    "BikeResold(uint256,address,address,uint256)": TypedContractEvent<
      BikeResoldEvent.InputTuple,
      BikeResoldEvent.OutputTuple,
      BikeResoldEvent.OutputObject
    >;
    BikeResold: TypedContractEvent<
      BikeResoldEvent.InputTuple,
      BikeResoldEvent.OutputTuple,
      BikeResoldEvent.OutputObject
    >;

    "BikeSold(uint256,address,address,uint256)": TypedContractEvent<
      BikeSoldEvent.InputTuple,
      BikeSoldEvent.OutputTuple,
      BikeSoldEvent.OutputObject
    >;
    BikeSold: TypedContractEvent<
      BikeSoldEvent.InputTuple,
      BikeSoldEvent.OutputTuple,
      BikeSoldEvent.OutputObject
    >;

    "BikeStatusUpdated(uint256,bool)": TypedContractEvent<
      BikeStatusUpdatedEvent.InputTuple,
      BikeStatusUpdatedEvent.OutputTuple,
      BikeStatusUpdatedEvent.OutputObject
    >;
    BikeStatusUpdated: TypedContractEvent<
      BikeStatusUpdatedEvent.InputTuple,
      BikeStatusUpdatedEvent.OutputTuple,
      BikeStatusUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceUpdated(uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "ReviewAdded(uint256,address,uint256,string)": TypedContractEvent<
      ReviewAddedEvent.InputTuple,
      ReviewAddedEvent.OutputTuple,
      ReviewAddedEvent.OutputObject
    >;
    ReviewAdded: TypedContractEvent<
      ReviewAddedEvent.InputTuple,
      ReviewAddedEvent.OutputTuple,
      ReviewAddedEvent.OutputObject
    >;

    "ReviewDeleted(uint256,uint256)": TypedContractEvent<
      ReviewDeletedEvent.InputTuple,
      ReviewDeletedEvent.OutputTuple,
      ReviewDeletedEvent.OutputObject
    >;
    ReviewDeleted: TypedContractEvent<
      ReviewDeletedEvent.InputTuple,
      ReviewDeletedEvent.OutputTuple,
      ReviewDeletedEvent.OutputObject
    >;

    "ReviewLiked(uint256,uint256,address,uint256)": TypedContractEvent<
      ReviewLikedEvent.InputTuple,
      ReviewLikedEvent.OutputTuple,
      ReviewLikedEvent.OutputObject
    >;
    ReviewLiked: TypedContractEvent<
      ReviewLikedEvent.InputTuple,
      ReviewLikedEvent.OutputTuple,
      ReviewLikedEvent.OutputObject
    >;

    "TrackerRegistered(uint256,address)": TypedContractEvent<
      TrackerRegisteredEvent.InputTuple,
      TrackerRegisteredEvent.OutputTuple,
      TrackerRegisteredEvent.OutputObject
    >;
    TrackerRegistered: TypedContractEvent<
      TrackerRegisteredEvent.InputTuple,
      TrackerRegisteredEvent.OutputTuple,
      TrackerRegisteredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
