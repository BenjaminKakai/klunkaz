/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface KlunkazBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "bikeIndex"
      | "getApproved"
      | "isApprovedForAll"
      | "name"
      | "owner"
      | "ownerOf"
      | "renounceOwnership"
      | "reviewsCounter"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BikeInsuranceUpdated"
      | "BikeListed"
      | "BikeRented"
      | "BikeResold"
      | "BikeSold"
      | "BikeStatusUpdated"
      | "DisputeRaised"
      | "ListingTypeUpdated"
      | "MaintenanceAdded"
      | "OwnershipTransferred"
      | "PriceUpdated"
      | "ProfileUpdated"
      | "RentalEnded"
      | "RentalPriceUpdated"
      | "ReviewAdded"
      | "ReviewDeleted"
      | "ReviewLiked"
      | "SecurityDepositUpdated"
      | "TrackerRegistered"
      | "TransactionCreated"
      | "Transfer"
      | "UserVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bikeIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bikeIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BikeInsuranceUpdatedEvent {
  export type InputTuple = [id: BigNumberish, isInsured: boolean];
  export type OutputTuple = [id: bigint, isInsured: boolean];
  export interface OutputObject {
    id: bigint;
    isInsured: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BikeListedEvent {
  export type InputTuple = [
    id: BigNumberish,
    owner: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [id: bigint, owner: string, price: bigint];
  export interface OutputObject {
    id: bigint;
    owner: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BikeRentedEvent {
  export type InputTuple = [
    bikeId: BigNumberish,
    renter: AddressLike,
    duration: BigNumberish,
    totalPrice: BigNumberish
  ];
  export type OutputTuple = [
    bikeId: bigint,
    renter: string,
    duration: bigint,
    totalPrice: bigint
  ];
  export interface OutputObject {
    bikeId: bigint;
    renter: string;
    duration: bigint;
    totalPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BikeResoldEvent {
  export type InputTuple = [
    id: BigNumberish,
    oldOwner: AddressLike,
    newOwner: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    oldOwner: string,
    newOwner: string,
    price: bigint
  ];
  export interface OutputObject {
    id: bigint;
    oldOwner: string;
    newOwner: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BikeSoldEvent {
  export type InputTuple = [
    id: BigNumberish,
    oldOwner: AddressLike,
    newOwner: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    oldOwner: string,
    newOwner: string,
    price: bigint
  ];
  export interface OutputObject {
    id: bigint;
    oldOwner: string;
    newOwner: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BikeStatusUpdatedEvent {
  export type InputTuple = [id: BigNumberish, isStolen: boolean];
  export type OutputTuple = [id: bigint, isStolen: boolean];
  export interface OutputObject {
    id: bigint;
    isStolen: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    by: AddressLike,
    reason: string
  ];
  export type OutputTuple = [transactionId: bigint, by: string, reason: string];
  export interface OutputObject {
    transactionId: bigint;
    by: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingTypeUpdatedEvent {
  export type InputTuple = [bikeId: BigNumberish, listingType: BigNumberish];
  export type OutputTuple = [bikeId: bigint, listingType: bigint];
  export interface OutputObject {
    bikeId: bigint;
    listingType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaintenanceAddedEvent {
  export type InputTuple = [
    bikeId: BigNumberish,
    details: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    bikeId: bigint,
    details: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    bikeId: bigint;
    details: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [bikeId: BigNumberish, newPrice: BigNumberish];
  export type OutputTuple = [bikeId: bigint, newPrice: bigint];
  export interface OutputObject {
    bikeId: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileUpdatedEvent {
  export type InputTuple = [user: AddressLike, name: string, location: string];
  export type OutputTuple = [user: string, name: string, location: string];
  export interface OutputObject {
    user: string;
    name: string;
    location: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentalEndedEvent {
  export type InputTuple = [bikeId: BigNumberish, renter: AddressLike];
  export type OutputTuple = [bikeId: bigint, renter: string];
  export interface OutputObject {
    bikeId: bigint;
    renter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentalPriceUpdatedEvent {
  export type InputTuple = [bikeId: BigNumberish, newPrice: BigNumberish];
  export type OutputTuple = [bikeId: bigint, newPrice: bigint];
  export interface OutputObject {
    bikeId: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewAddedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    reviewer: AddressLike,
    rating: BigNumberish,
    comment: string
  ];
  export type OutputTuple = [
    productId: bigint,
    reviewer: string,
    rating: bigint,
    comment: string
  ];
  export interface OutputObject {
    productId: bigint;
    reviewer: string;
    rating: bigint;
    comment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewDeletedEvent {
  export type InputTuple = [productId: BigNumberish, reviewIndex: BigNumberish];
  export type OutputTuple = [productId: bigint, reviewIndex: bigint];
  export interface OutputObject {
    productId: bigint;
    reviewIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewLikedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    reviewIndex: BigNumberish,
    liker: AddressLike,
    likes: BigNumberish
  ];
  export type OutputTuple = [
    productId: bigint,
    reviewIndex: bigint,
    liker: string,
    likes: bigint
  ];
  export interface OutputObject {
    productId: bigint;
    reviewIndex: bigint;
    liker: string;
    likes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecurityDepositUpdatedEvent {
  export type InputTuple = [bikeId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [bikeId: bigint, amount: bigint];
  export interface OutputObject {
    bikeId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrackerRegisteredEvent {
  export type InputTuple = [bikeId: BigNumberish, deviceAddress: AddressLike];
  export type OutputTuple = [bikeId: bigint, deviceAddress: string];
  export interface OutputObject {
    bikeId: bigint;
    deviceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionCreatedEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    bikeId: BigNumberish,
    transactionType: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [
    transactionId: bigint,
    bikeId: bigint,
    transactionType: bigint,
    from: string,
    to: string
  ];
  export interface OutputObject {
    transactionId: bigint;
    bikeId: bigint;
    transactionType: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserVerifiedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KlunkazBase extends BaseContract {
  connect(runner?: ContractRunner | null): KlunkazBase;
  waitForDeployment(): Promise<this>;

  interface: KlunkazBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  bikeIndex: TypedContractMethod<[], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reviewsCounter: TypedContractMethod<[], [bigint], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bikeIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reviewsCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BikeInsuranceUpdated"
  ): TypedContractEvent<
    BikeInsuranceUpdatedEvent.InputTuple,
    BikeInsuranceUpdatedEvent.OutputTuple,
    BikeInsuranceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BikeListed"
  ): TypedContractEvent<
    BikeListedEvent.InputTuple,
    BikeListedEvent.OutputTuple,
    BikeListedEvent.OutputObject
  >;
  getEvent(
    key: "BikeRented"
  ): TypedContractEvent<
    BikeRentedEvent.InputTuple,
    BikeRentedEvent.OutputTuple,
    BikeRentedEvent.OutputObject
  >;
  getEvent(
    key: "BikeResold"
  ): TypedContractEvent<
    BikeResoldEvent.InputTuple,
    BikeResoldEvent.OutputTuple,
    BikeResoldEvent.OutputObject
  >;
  getEvent(
    key: "BikeSold"
  ): TypedContractEvent<
    BikeSoldEvent.InputTuple,
    BikeSoldEvent.OutputTuple,
    BikeSoldEvent.OutputObject
  >;
  getEvent(
    key: "BikeStatusUpdated"
  ): TypedContractEvent<
    BikeStatusUpdatedEvent.InputTuple,
    BikeStatusUpdatedEvent.OutputTuple,
    BikeStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "ListingTypeUpdated"
  ): TypedContractEvent<
    ListingTypeUpdatedEvent.InputTuple,
    ListingTypeUpdatedEvent.OutputTuple,
    ListingTypeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaintenanceAdded"
  ): TypedContractEvent<
    MaintenanceAddedEvent.InputTuple,
    MaintenanceAddedEvent.OutputTuple,
    MaintenanceAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileUpdated"
  ): TypedContractEvent<
    ProfileUpdatedEvent.InputTuple,
    ProfileUpdatedEvent.OutputTuple,
    ProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RentalEnded"
  ): TypedContractEvent<
    RentalEndedEvent.InputTuple,
    RentalEndedEvent.OutputTuple,
    RentalEndedEvent.OutputObject
  >;
  getEvent(
    key: "RentalPriceUpdated"
  ): TypedContractEvent<
    RentalPriceUpdatedEvent.InputTuple,
    RentalPriceUpdatedEvent.OutputTuple,
    RentalPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewAdded"
  ): TypedContractEvent<
    ReviewAddedEvent.InputTuple,
    ReviewAddedEvent.OutputTuple,
    ReviewAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewDeleted"
  ): TypedContractEvent<
    ReviewDeletedEvent.InputTuple,
    ReviewDeletedEvent.OutputTuple,
    ReviewDeletedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewLiked"
  ): TypedContractEvent<
    ReviewLikedEvent.InputTuple,
    ReviewLikedEvent.OutputTuple,
    ReviewLikedEvent.OutputObject
  >;
  getEvent(
    key: "SecurityDepositUpdated"
  ): TypedContractEvent<
    SecurityDepositUpdatedEvent.InputTuple,
    SecurityDepositUpdatedEvent.OutputTuple,
    SecurityDepositUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TrackerRegistered"
  ): TypedContractEvent<
    TrackerRegisteredEvent.InputTuple,
    TrackerRegisteredEvent.OutputTuple,
    TrackerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TransactionCreated"
  ): TypedContractEvent<
    TransactionCreatedEvent.InputTuple,
    TransactionCreatedEvent.OutputTuple,
    TransactionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UserVerified"
  ): TypedContractEvent<
    UserVerifiedEvent.InputTuple,
    UserVerifiedEvent.OutputTuple,
    UserVerifiedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BikeInsuranceUpdated(uint256,bool)": TypedContractEvent<
      BikeInsuranceUpdatedEvent.InputTuple,
      BikeInsuranceUpdatedEvent.OutputTuple,
      BikeInsuranceUpdatedEvent.OutputObject
    >;
    BikeInsuranceUpdated: TypedContractEvent<
      BikeInsuranceUpdatedEvent.InputTuple,
      BikeInsuranceUpdatedEvent.OutputTuple,
      BikeInsuranceUpdatedEvent.OutputObject
    >;

    "BikeListed(uint256,address,uint256)": TypedContractEvent<
      BikeListedEvent.InputTuple,
      BikeListedEvent.OutputTuple,
      BikeListedEvent.OutputObject
    >;
    BikeListed: TypedContractEvent<
      BikeListedEvent.InputTuple,
      BikeListedEvent.OutputTuple,
      BikeListedEvent.OutputObject
    >;

    "BikeRented(uint256,address,uint256,uint256)": TypedContractEvent<
      BikeRentedEvent.InputTuple,
      BikeRentedEvent.OutputTuple,
      BikeRentedEvent.OutputObject
    >;
    BikeRented: TypedContractEvent<
      BikeRentedEvent.InputTuple,
      BikeRentedEvent.OutputTuple,
      BikeRentedEvent.OutputObject
    >;

    "BikeResold(uint256,address,address,uint256)": TypedContractEvent<
      BikeResoldEvent.InputTuple,
      BikeResoldEvent.OutputTuple,
      BikeResoldEvent.OutputObject
    >;
    BikeResold: TypedContractEvent<
      BikeResoldEvent.InputTuple,
      BikeResoldEvent.OutputTuple,
      BikeResoldEvent.OutputObject
    >;

    "BikeSold(uint256,address,address,uint256)": TypedContractEvent<
      BikeSoldEvent.InputTuple,
      BikeSoldEvent.OutputTuple,
      BikeSoldEvent.OutputObject
    >;
    BikeSold: TypedContractEvent<
      BikeSoldEvent.InputTuple,
      BikeSoldEvent.OutputTuple,
      BikeSoldEvent.OutputObject
    >;

    "BikeStatusUpdated(uint256,bool)": TypedContractEvent<
      BikeStatusUpdatedEvent.InputTuple,
      BikeStatusUpdatedEvent.OutputTuple,
      BikeStatusUpdatedEvent.OutputObject
    >;
    BikeStatusUpdated: TypedContractEvent<
      BikeStatusUpdatedEvent.InputTuple,
      BikeStatusUpdatedEvent.OutputTuple,
      BikeStatusUpdatedEvent.OutputObject
    >;

    "DisputeRaised(uint256,address,string)": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "ListingTypeUpdated(uint256,uint8)": TypedContractEvent<
      ListingTypeUpdatedEvent.InputTuple,
      ListingTypeUpdatedEvent.OutputTuple,
      ListingTypeUpdatedEvent.OutputObject
    >;
    ListingTypeUpdated: TypedContractEvent<
      ListingTypeUpdatedEvent.InputTuple,
      ListingTypeUpdatedEvent.OutputTuple,
      ListingTypeUpdatedEvent.OutputObject
    >;

    "MaintenanceAdded(uint256,string,uint256)": TypedContractEvent<
      MaintenanceAddedEvent.InputTuple,
      MaintenanceAddedEvent.OutputTuple,
      MaintenanceAddedEvent.OutputObject
    >;
    MaintenanceAdded: TypedContractEvent<
      MaintenanceAddedEvent.InputTuple,
      MaintenanceAddedEvent.OutputTuple,
      MaintenanceAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceUpdated(uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "ProfileUpdated(address,string,string)": TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
    ProfileUpdated: TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;

    "RentalEnded(uint256,address)": TypedContractEvent<
      RentalEndedEvent.InputTuple,
      RentalEndedEvent.OutputTuple,
      RentalEndedEvent.OutputObject
    >;
    RentalEnded: TypedContractEvent<
      RentalEndedEvent.InputTuple,
      RentalEndedEvent.OutputTuple,
      RentalEndedEvent.OutputObject
    >;

    "RentalPriceUpdated(uint256,uint256)": TypedContractEvent<
      RentalPriceUpdatedEvent.InputTuple,
      RentalPriceUpdatedEvent.OutputTuple,
      RentalPriceUpdatedEvent.OutputObject
    >;
    RentalPriceUpdated: TypedContractEvent<
      RentalPriceUpdatedEvent.InputTuple,
      RentalPriceUpdatedEvent.OutputTuple,
      RentalPriceUpdatedEvent.OutputObject
    >;

    "ReviewAdded(uint256,address,uint256,string)": TypedContractEvent<
      ReviewAddedEvent.InputTuple,
      ReviewAddedEvent.OutputTuple,
      ReviewAddedEvent.OutputObject
    >;
    ReviewAdded: TypedContractEvent<
      ReviewAddedEvent.InputTuple,
      ReviewAddedEvent.OutputTuple,
      ReviewAddedEvent.OutputObject
    >;

    "ReviewDeleted(uint256,uint256)": TypedContractEvent<
      ReviewDeletedEvent.InputTuple,
      ReviewDeletedEvent.OutputTuple,
      ReviewDeletedEvent.OutputObject
    >;
    ReviewDeleted: TypedContractEvent<
      ReviewDeletedEvent.InputTuple,
      ReviewDeletedEvent.OutputTuple,
      ReviewDeletedEvent.OutputObject
    >;

    "ReviewLiked(uint256,uint256,address,uint256)": TypedContractEvent<
      ReviewLikedEvent.InputTuple,
      ReviewLikedEvent.OutputTuple,
      ReviewLikedEvent.OutputObject
    >;
    ReviewLiked: TypedContractEvent<
      ReviewLikedEvent.InputTuple,
      ReviewLikedEvent.OutputTuple,
      ReviewLikedEvent.OutputObject
    >;

    "SecurityDepositUpdated(uint256,uint256)": TypedContractEvent<
      SecurityDepositUpdatedEvent.InputTuple,
      SecurityDepositUpdatedEvent.OutputTuple,
      SecurityDepositUpdatedEvent.OutputObject
    >;
    SecurityDepositUpdated: TypedContractEvent<
      SecurityDepositUpdatedEvent.InputTuple,
      SecurityDepositUpdatedEvent.OutputTuple,
      SecurityDepositUpdatedEvent.OutputObject
    >;

    "TrackerRegistered(uint256,address)": TypedContractEvent<
      TrackerRegisteredEvent.InputTuple,
      TrackerRegisteredEvent.OutputTuple,
      TrackerRegisteredEvent.OutputObject
    >;
    TrackerRegistered: TypedContractEvent<
      TrackerRegisteredEvent.InputTuple,
      TrackerRegisteredEvent.OutputTuple,
      TrackerRegisteredEvent.OutputObject
    >;

    "TransactionCreated(uint256,uint256,uint8,address,address)": TypedContractEvent<
      TransactionCreatedEvent.InputTuple,
      TransactionCreatedEvent.OutputTuple,
      TransactionCreatedEvent.OutputObject
    >;
    TransactionCreated: TypedContractEvent<
      TransactionCreatedEvent.InputTuple,
      TransactionCreatedEvent.OutputTuple,
      TransactionCreatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UserVerified(address)": TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
    UserVerified: TypedContractEvent<
      UserVerifiedEvent.InputTuple,
      UserVerifiedEvent.OutputTuple,
      UserVerifiedEvent.OutputObject
    >;
  };
}
